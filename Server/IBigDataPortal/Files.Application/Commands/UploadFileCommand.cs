using Dapper;
using Files.Domain.FilesAggregate.Requests;
using Files.Infrastructure;
using Google.Cloud.Storage.V1;
using IBigDataPortal.Database;
using IBigDataPortal.Database.Entities;
using IBigDataPortal.Infrastructure;
using MediatR;

namespace Files.Application.Commands;

public class UploadFileCommand : IRequest
{
    public UploadFileRequest Body { get; set; }
    public int UserId { get; set; }
    public UploadFileCommand(UploadFileRequest body, int userId)
    {
        if (userId == 0)
        {
            throw new ArgumentException("User cannot be empty");
        }

        Body = body;
        UserId = userId;
    }    
}

public class UploadFileCommandHandler : IRequestHandler<UploadFileCommand>
{
    private readonly ISqlConnectionService _connectionService;
    public UploadFileCommandHandler(ISqlConnectionService connectionService)
    {
        _connectionService = connectionService;
    }
    
    public async Task<Unit> Handle(UploadFileCommand request, CancellationToken cancellationToken)
    {
        Guid newFileGuid = Guid.NewGuid();
        await UploadFileToGCP(request, cancellationToken, newFileGuid);
        await UploadMetadataToDatabase(request, newFileGuid);
        return Unit.Value;
        
    }
    
    private async Task UploadFileToGCP(UploadFileCommand request, CancellationToken cancellationToken, Guid guid) {
        var filePath = Path.GetTempFileName();
        
        await using (var stream = File.Create(filePath))
        {
            // The formFile is the method parameter which type is IFormFile
            // Saves the files to the local file system using a file name generated by the app.
            await request.Body.FormFile.CopyToAsync(stream, cancellationToken);
        }
        
        var gcsStorage = await StorageClient.CreateAsync();
        await using (var fileStream = new FileStream(filePath, FileMode.Open,
                         FileAccess.Read, FileShare.Read))
        {
            await gcsStorage.UploadObjectAsync(IBucketName.BucketName, guid.ToString(), request.Body.FormFile.ContentType, fileStream, cancellationToken: cancellationToken);
        }

        //Delete temporary local picture
        File.Delete(filePath);
    }

    private async Task UploadMetadataToDatabase(UploadFileCommand request, Guid guid)
    {
        var connection = await _connectionService.GetAsync();
        var sql = $@"INSERT INTO {Dbo.FilesMetadata} 
                        ({nameof(FileMetadata.Guid)},
                        {nameof(FileMetadata.FileName)},
                        {nameof(FileMetadata.CreatedById)},
                        {nameof(FileMetadata.CreatedOn)}, 
                        {nameof(FileMetadata.ModuleEnum)},
                        {nameof(FileMetadata.RefId)})
                        VALUES (@id, @fileName, @userId, @date, @module, @refId)";
        await connection.ExecuteAsync(sql,
            new
            {
                id = guid,
                fileName = request.Body.FileName,
                userId = request.UserId,
                date = DateTimeOffset.Now,
                module = request.Body.FileModule,
                refId = request.Body.RefId
            });
    }
}