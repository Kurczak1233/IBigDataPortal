using Files.Domain.FilesAggregate.Requests;
using Google.Cloud.Storage.V1;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace IBigDataPortal.Controllers;


[ApiController]
[Authorize]
[Route("[controller]")]
public class FilesController : ControllerBase
{
    public FilesController()
    {
            
    }

    [HttpPost]
    public async Task<IActionResult> UploadFileToServer([FromForm] UploadFileRequest body)
    {
        //Option to send many files in short period of time.
        ParallelOptions parallelOptions = new ParallelOptions();
        parallelOptions.MaxDegreeOfParallelism = Environment.ProcessorCount * 2;
        
        string bucketName = "ibigdataportal_files";
        var filePath = Path.GetTempFileName();
        // Parallel.ForEach(filesNotAlreadyInCloudStorage, parallelOptions, fileName => {
        //     var fileToUpload = directory + “\\” + fileName;
        //     try
        //     {
        //         UploadFile(bucketName, fileToUpload, ref storage);
        //         Console.WriteLine(“Uploaded file “ + fileToUpload + “ — “ + count++);
        //     }
        //     catch (Exception e)
        //     {
        //         Console.WriteLine(e.Message);
        //     }
        // } );
        
        using (var stream = System.IO.File.Create(filePath))
        {
            // The formFile is the method parameter which type is IFormFile
            // Saves the files to the local file system using a file name generated by the app.
            await body.FormFile.CopyToAsync(stream);
        }
        
        var gcsStorage = StorageClient.Create();
        using (var fileStream = new FileStream(filePath, FileMode.Open,
                   FileAccess.Read, FileShare.Read))
        {
            gcsStorage.UploadObject(bucketName, body.FileName, body.FormFile.ContentType, fileStream);
        }

        System.IO.File.Delete(filePath);
        return Ok();
    }
    
    [HttpGet]
    public async Task<IActionResult> GetFileFromServer()
    {
        string bucketName = "ibigdataportal_files";
        
        string objectBlobName = "profilowe.png";
        var gcsStorage = StorageClient.Create();
        using var stream = System.IO.File.OpenRead("Program.cs");
        var result = await gcsStorage.DownloadObjectAsync(bucketName, objectBlobName, stream);
            
        return Ok();
    }
}